# -*- coding: utf-8 -*-
"""Aldiansyah Satrio Kabisat_MLT2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17GuqdnVSSWtSDHpqKU5XIOv8lSFC9dK4

# Machine Learning Terapan 2 - Aldiansyah Satrio Kabisat

# Data Loading
"""

from google.colab import files

files.upload()

"""Import key kaggle"""

!mkdir ~/.kaggle
!mv kaggle.json ~/.kaggle/kaggle.json

!chmod 600 ~/.kaggle/kaggle.json

"""Memindahkan key kaggle ke direktori kaggle"""

!kaggle datasets download parasharmanas/movie-recommendation-system

"""Mengunduh dataset"""

!mkdir dataset
!unzip movie-recommendation-system.zip -d ./dataset

"""Mengekstrak dataset"""

import pandas as pd
import numpy as np

df = pd.read_csv('dataset/movies.csv')

"""Membaca file menggunakan pandas

# Preliminary Data Analysis and Preprocessing
"""

df.head(10)

"""Mengecek struktur file yang ada"""

# Check for duplicates in the 'title' column
duplicate_titles = df[df.duplicated(subset=['title'], keep=False)]

duplicate_titles['title']

"""Mengecek apakah ada data duplikat, Terdapat beberapa duplikat yang ditemukan"""

# Remove duplicates in the 'title' column
df_unique_titles = df.drop_duplicates(subset=['title'])

"""Menghapus data yang duplikat"""

df_unique_titles.isnull().sum()

"""Tidak ada data dengan nilai null"""

df_unique_titles[df_unique_titles['genres'].str.contains('no genres listed')]

"""Terdapat beberapa data yang tidak memiliki genre tertulis"""

df_filtered = df_unique_titles[~df_unique_titles['genres'].str.contains('no genres listed')]

df_filtered.reset_index(drop=True, inplace=True)

df_filtered

"""Data tanpa genre dihapus"""

df_filtered['genres'] = df_filtered['genres'].str.split('|')

"""Tokenisasi genre agar dapat dibaca sebagai list"""

df_filtered

def jaccard_similarity(movie1_genres, movie2_genres):
    set1 = set(movie1_genres)
    set2 = set(movie2_genres)
    intersection = len(set1.intersection(set2))
    union = len(set1.union(set2))
    return intersection / union if union != 0 else 0

def get_recommendation(df, movie_id, n):
    similarities = {}
    movie1_genres = df.loc[df['movieId'] == movie_id, 'genres'].iloc[0]

    for index, row in df.iterrows():
        if row['movieId'] != movie_id:
            movie2_genres = row['genres']
            similarity = jaccard_similarity(movie1_genres, movie2_genres)
            similarities[row['title']] = similarity

    top_n_similarities = sorted(similarities.items(), key=lambda x: x[1], reverse=True)[:n]
    return top_n_similarities

"""Mendefinisikan fungsi untuk mencari kemiripan film menggunakan Jaccard Similiarity dan mendapatkan rekomendasi berdasarkan film dengan index Jaccard Similiarity tertinggi"""

id=1

title = df.loc[df['movieId'] == id, 'title'].iloc[0]

recommendation = get_recommendation(df_filtered, movie_id=id, n=10)
print(f"Movie Similiar to {title}:")
for movie, similarity in recommendation:
    print(movie, "-", similarity)

"""Menguji coba sistem rekomendasi pada data acak

Dari ujicoba diatas didapatkan sistem rekomendasi sederhana berbasis kontent (content-based) menggunakan Jaccard Similiarity. Secara umum sistem telah dapat merekomendasikan sistem dengan genre serupa. Hal ini dapat dilihat dengan sebagian besar film yang direkomendasikan merupakan film dari studio yang sama dan menargetkan audien yang sama. Meskipun tergolong sederhana sistem rekomendasi sudah dapat digunakan pada kasus nyata yang memerlukan sistem rekomendasi yang cepat dan scalable
"""